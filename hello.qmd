---
title: "TBD"
author: "Zaid and Zoe"
format: pdf
editor_options: 
  chunk_output_type: console
---

```{r load-data, message = F, warning = F}
library(tidyverse) 
library(tidymodels)
library(stringr)
library(stringi)
library(leaps)
library(MASS)
library(glmnet)
library(caret)
library(Matrix)
pass <- read.csv("data/pass.csv")
```

```{r edit-data, message = F, warning = F}
uniqchars <- function(x) unique(strsplit(x, "")[[1]]) 

pass_more <- pass |>
  mutate(true_val = ifelse(time_unit == "years", 31536000*value,
                           ifelse(time_unit == "months", 2592000*value,
                                  ifelse(time_unit == "days", 86400*value,
                                         ifelse(time_unit == "hours", 3600*value,
                                                ifelse(time_unit =="minutes", 60*value,value))))),
         true_val = jitter(true_val),
         pass_length = nchar(password),
         font_size = NULL,
         value = NULL,
         time_unit = NULL,
         rank_alt = NULL,
         num_digits = str_count(password, "[0-9]"),
         num_letters = str_count(password, "[a-z]"),
         num_vowels = str_count(password, "[a,e,i,o,u]"),
         num_unique = sapply(strsplit(password, ""), function(x) length(unique(x)))) |>
  filter(!is.na(rank)) |>
  filter(strength < 11) 

nrow(pass_more)
```

# Introduction

## Research Question and Motivation 

significance -- passwords becoming more important as there is an ever-increasing market for user data, discussions on data privacy are growing too 
- also stronger hacking tools 
- increasingly technology-oriented world
- we wanted to explore what characteristics yield strong passwords? 
- looking at this in two ways: "strength", which is calculated by XX; and how long takes to crack by online guessing (what does this really mean tho?)
- we will decide which passwords are "strongest" by looking at which factors seem to be important for both strength and time to crack 

We believe that the length of the password, as well as its composition could possibly impact the strength of the password, and so we decided to add them in to investigate their various relationships.

*The research question and motivation are clearly stated in the introduction, including citations for the data source and any external research.* 

TidyTuesday: https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-01-14

Information is Beautiful passwords spreadsheet: https://docs.google.com/spreadsheets/d/1cz7TDhm0ebVpySqbTvrHrD3WpxeyE4hLZtifWSnoNTQ/edit#gid=21 

## Data Description 

| Variable Name     | Type      | Description                                                      |
|--------------|--------------|--------------------------------------------|
| rank              | double    | Popularity in their database of released passwords               |
| password          | character | Actual text of password                                          |
| category          | character | Classification of type of password                               |                 |
| true_val          | double    | Time to crack by online guessing standardized to seconds         |
| offline_crack_sec | double    | Time to crack offline in seconds                                 |                                                       |
| strength          | double    | Quality of password where 10 is highest, 1 is lowest             |
                  |
| pass_length       | double    | Length of the password                                           |
| num_digits        | double    | Number of digits in the password                                 |
| num_letters       | double    | Number of letters in the password                                |
| num_vowels        | double    | Number of vowels in the password                                 |
| num_unique        | double    | Number of unique characters (letters or numbers in the password) |

Our data come from Tidy Tuesday, originally sourced from Information is Beautiful, a design company that distills data into visualizations and infographics. Information is Beautiful acquired its data on passwords by deep-mining 20 separate data breaches in 2017, including breaches of Facebook, Sony, and  Yahoo. The data only includes the 500 most popular passwords, which also tended to be low-strength. 

In the cleaning process, we removed the last seven observations, as all their values were "NA." We also removed several variables that appeared in the original dataset. First, we removed the variables that had a strength recorded over ten as those may have been miscalculations or strengths that were not standardized to values 1 through 10. Second, we removed the `rank_alt` variable because we wanted to focus on the passwords' first ranks of popularity, as opposed to their secondary ranks, because their first ranks were a clearer indicator of how common they were. Third, also removed the font_size variable, as the font sizes were chosen arbitrarily to display passwords in a graphic on the Knowledge is Beautiful webiste. Fourth and finally, we combined the `value` and `time_unit` variables into one time standardized to seconds called `true_val`. Previously, `value` referred to the time to crack by online guessing, and time unit was the time unit to match with that value (seconds, minutes, hours, days, months, or years). We added noise to our new `true_val` variable because the time to crack by online guessing only included discrete values (2.17 years, 0.00321 days, etc.). From there, we were left with 485 observations. Additionally, we added five new variables: pass_length, num_digits, num_letters, num_vowels, and num_unique. 

## Exploratory Data Analysis

```{r EDA, message = F, warning = F}
pass_ordered <- pass_more

pass_ordered$category <- with(pass_ordered, reorder(category , strength, median , na.rm=T))

pass_more %>%
  ggplot(aes(x = strength)) + 
  geom_bar() +
  theme_minimal() + 
  scale_fill_viridis_d()

pass_ordered |>
  ggplot(aes(x = strength, y = category, fill = category)) + 
  geom_boxplot() +
  theme_minimal() + 
  scale_fill_viridis_d()

pass_more %>%
  group_by(num_unique, strength, category) %>%
  summarize(freq=n()) |>
  ggplot(aes(x = num_unique, y = strength, color = category, size = freq)) +
  facet_wrap(~category) + 
  geom_point() +
  theme_minimal() + 
  scale_fill_viridis_d()
```

Preliminary findings: - rank - (from dataset) top 5 most popular passwords were password, 123456, 12345678, 1234, and qwerty - category - name passwords most common - length - passwords of length 6 most common - strength - only looking at strength ratings 1-10, passwords with 8 rating most popular (these are relative to generally bad passwords tho) - number digits: 0 digits most popular - number letters: 6 most common (makes sense if digits aren't common and passwords are usually of length 6) - number vowels: 2 most common - num unique: 6 most common, 5 not too far off

Conclusions: - seeming like name passwords of length 6 and relatively high strength compared to generally bad passwords, without numbers are the most common. These are probably actual words and not just random repeated letters since the num unique is typically equal to the length (also just looking at the passwords)

*The explanatory data analysis helps the reader better understand the observations in the data along with interesting and relevant relationships between the variables. It incorporates appropriate visualizations and summary statistics.* 

# Methodology

```{r methods, message = F, warning = F}

y1 <- pass_more$strength
x1 <- model.matrix(strength ~ . - password - true_val - offline_crack_sec - rank,
            data = pass_more) 

y2 <- pass_more$true_val
x2 <- model.matrix(true_val ~ . - password - offline_crack_sec - strength - rank,
            data = pass_more) 

m_lasso_strength <- cv.glmnet(x1, y1, alpha = 1)
best_lambda <- m_lasso_strength$lambda.min
best_lambda
m_best <- glmnet(x1, y1, alpha = 1, lambda = best_lambda)
m_best$beta

m_lasso_strength <- cv.glmnet(x2, y2, alpha = 1)
best_lambda <- m_lasso_strength$lambda.min
best_lambda
m_best <- glmnet(x2, y2, alpha = 1, lambda = best_lambda)
m_best$beta
```

1.  run regressions to see which help predict password strength most? what is our response variable tho

-   can do LASSO and stepwise and compare models ?
-   fit model with interaction terms maybe?

2.  hypothesis test

3.  we could prolly run a logistic regression but not sure why we'd want to predict the odds? idk

not seeing use for multinomial or ordinal regression bc i doubt our outcome will be categorical...

don't think need mixed model bc not seeing any grouping -- ooh wait maybe within category? ehhh maybe not 

#Generally speaking, the strength of a password is determined by three things: the length of the character set used, the length of the password itself, and to a lesser extent, the variety in characters chosen.

# Results

# Discussion
